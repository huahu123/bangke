<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuq.info.dao.CommentDao">

    <resultMap id="commentResultMap" type="Comment">
        <id property="commentId" column="commentId"/>
        <result property="content" column="content"/>
        <result property="postId" column="postId"/>
        <result property="userId" column="userId"/>
        <result property="likeCount" column="like_count"/>
        <result property="createTime" column="create_time"/>
        <association property="fromUser" javaType="User" resultMap="userResult"/>
        <association property="toUser" javaType="User" resultMap="userResult" columnPrefix="to_"/>
    </resultMap>

    <resultMap id="userResult" type="User">
        <id property="userId" column="userId"/>
        <result property="avatarUrl" column="avatarUrl"/>
        <result property="nickName" column="nickName"/>
    </resultMap>
    <insert id="insertComment">
        INSERT ignore INTO comment (postId,content,from_userId,to_userId,`level`,p_commentId)
        VALUES (#{comment.postId},#{comment.content},#{fromUserId},#{toUserId},#{level},#{pCommentId})
    </insert>

    <select id="queryCommentByPostid" parameterType="long" resultMap="commentResultMap">
        SELECT c.commentId,c.content,c.postId,c.like_count,c.create_time,
        u1.userId,
        u1.avatarUrl,
        u1.nickName,
        u2.userId as to_userId,
        u2.avatarUrl as to_avatarUrl,
        u2.nickName as to_nickName
        FROM comment c
        INNER JOIN user u1 ON c.from_userId =u1.userId
        INNER JOIN user u2 ON c.to_userId =u2.userId
        WHERE c.postId=#{postId} AND `level` = #{level} AND
        <if test="pCommentId!=null">
            p_commentId =#{pCommentId}
        </if>
    </select>

    <update id="updateLikeCount">
        UPDATE comment SET
        <if test="flag==1">
            like_count =like_count+1
        </if>
        <if test="flag==0">
            like_count =like_count-1
        </if>
        WHERE commentId =#{commentId}
    </update>

    <select id="queryUnReadCommentByUserId" parameterType="long" resultMap="commentResultMap">
        SELECT c.commentId,c.content,c.postId,c.like_count,c.create_time,
        u1.userId,
        u1.avatarUrl,
        u1.nickName,
        u2.userId as to_userId,
        u2.avatarUrl as to_avatarUrl,
        u2.nickName as to_nickName
        FROM comment c
        INNER JOIN post ON  c.postId = post.postId
        INNER JOIN user u1 ON c.from_userId =u1.userId
        INNER JOIN user u2 ON c.to_userId =u2.userId
        WHERE post.userId =#{userId} AND is_read = 0
    </select>

    <select id="queryUnReadCountCommentByUserId" parameterType="long" resultType="int">
        SELECT count(1)
        FROM comment c
        INNER JOIN post ON  c.postId = post.postId
        WHERE post.userId =#{userId} AND is_read = 0
    </select>


    <update id="updateCommentByIsRead" parameterType="java.util.List">
        UPDATE comment SET is_read =1 WHERE commentId IN (
        <foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>
        )
    </update>

    <delete id="delComment" parameterType="Long">
        DELETE FROM comment WHERE commentId= #{commentId}
    </delete>
    <delete id="delCComment" parameterType="Long">
        DELETE FROM comment WHERE p_commentId= #{p_commentId}
    </delete>
    <delete id="delCommentByPostId" parameterType="Long">
        DELETE FROM comment WHERE postId= #{postId}
    </delete>

    <select id="queryCommentUserIdByCommentId" parameterType="long" resultType="Long">
        SELECT from_userId FROM comment WHERE commentId=#{commentId}
    </select>
    <select id="queryCommentByCommentId" parameterType="long" resultType="Comment">
        SELECT commentId,`level`,p_commentId,postId FROM comment WHERE commentId=#{commentId}
    </select>
</mapper>